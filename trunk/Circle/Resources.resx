<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AskToSignSignatureRequestWithParent" xml:space="preserve">
    <value>You have a valid certificate with which you can sign your new certificate request. If you do so you not need to print out your request and get signatures from authorities but the new certificate will only be valid as long as the one you already have, that is {0:d}. Do you want to sign your signing request with your existing certificate?</value>
  </data>
  <data name="CreateCertificateDone" xml:space="preserve">
    <value>Your request has been submitted to the server. You must now wait for the certificate authority to process it.</value>
  </data>
  <data name="CreateCertificateEmailAddress" xml:space="preserve">
    <value>Email address:</value>
  </data>
  <data name="CreateCertificateEmailNotification" xml:space="preserve">
    <value>Notify me by email, when an answer to my certificate signing request is available. This requires your email address to be stored on the PiVote server.</value>
  </data>
  <data name="CreateCertificateFirstname" xml:space="preserve">
    <value>Firstname</value>
  </data>
  <data name="CreateCertificateFunction" xml:space="preserve">
    <value>Party function</value>
  </data>
  <data name="CreateCertificateGroup" xml:space="preserve">
    <value>Group:</value>
  </data>
  <data name="CreateCertificateId" xml:space="preserve">
    <value>Id</value>
  </data>
  <data name="CreateCertificatePrintAndSend" xml:space="preserve">
    <value>&amp;Print and Save</value>
  </data>
  <data name="CreateCertificateSaveButton" xml:space="preserve">
    <value>&amp;Save...</value>
  </data>
  <data name="CreateCertificateSaveDialog" xml:space="preserve">
    <value>Save Certificate</value>
  </data>
  <data name="CreateCertificateSurname" xml:space="preserve">
    <value>Surname</value>
  </data>
  <data name="CreateCertificateType" xml:space="preserve">
    <value>Certificate type</value>
  </data>
  <data name="CreateCertificateTypeAdmin" xml:space="preserve">
    <value>Administrator</value>
  </data>
  <data name="CreateCertificateTypeAuthority" xml:space="preserve">
    <value>Voting Authority</value>
  </data>
  <data name="CreateCertificateTypeVoter" xml:space="preserve">
    <value>Voter</value>
  </data>
  <data name="OptionAbstainSpecial" xml:space="preserve">
    <value>Abstain_@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</value>
  </data>
  <data name="SignRequestUnlockAction" xml:space="preserve">
    <value>Recover your certificate request.</value>
  </data>
  <data name="SimpleChooseCertificateAdvancedOption" xml:space="preserve">
    <value>Show me more options</value>
  </data>
  <data name="SimpleChooseCertificateCreateButton" xml:space="preserve">
    <value>&amp;Create</value>
  </data>
  <data name="SimpleChooseCertificateCreateExplain" xml:space="preserve">
    <value>To get a certificate signed by the certificate authority you first need to create your certificate. 

Then you must fill in your personal data which is then included in your request for certificate signing. This request will be printed out and you need to meet three voting authorities which will check your identity, sign your paper request and forward it to the certificate authority.

Finally you need to upload your request for certificate signing to the server to facilitate the signing process. You will be notified by the certificate authority via email once you certificate is signed and the response is uploaded to the server.</value>
  </data>
  <data name="SimpleChooseCertificateCreateOption" xml:space="preserve">
    <value>I need a new certificate</value>
  </data>
  <data name="SimpleChooseCertificateHeader" xml:space="preserve">
    <value>In order to vote you need a certificate proofing your identitiy.</value>
  </data>
  <data name="SimpleChooseCertificateImportButton" xml:space="preserve">
    <value>&amp;Import</value>
  </data>
  <data name="SimpleChooseCertificateImportDone" xml:space="preserve">
    <value>Certificate import successful.</value>
  </data>
  <data name="SimpleChooseCertificateImportOption" xml:space="preserve">
    <value>I already have a certificate</value>
  </data>
  <data name="SimpleChooseCertificatePrintButton" xml:space="preserve">
    <value>&amp;Print</value>
  </data>
  <data name="SimpleChooseCertificateUploadButton" xml:space="preserve">
    <value>&amp;Upload</value>
  </data>
  <data name="SimpleCreateCertificateFileMissing" xml:space="preserve">
    <value>The recovery file for your certificate request is missing. You must create a new request.</value>
  </data>
  <data name="SimpleCreateCertificateSigningCanceled" xml:space="preserve">
    <value>You canceled the signing of your certificate request.</value>
  </data>
  <data name="VoteDescriptionButton" xml:space="preserve">
    <value>&amp;Description...</value>
  </data>
  <data name="VoteDescriptionCloseButton" xml:space="preserve">
    <value>&amp;Close</value>
  </data>
  <data name="VoteDescriptionTitle" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="VoteMaxOptions" xml:space="preserve">
    <value>You can vote for up to {0} options. If you don't spend them all, the remaining ones will be counted as absteentions.</value>
  </data>
  <data name="VoteSingleOption" xml:space="preserve">
    <value>You must select one option to vote for.</value>
  </data>
</root>