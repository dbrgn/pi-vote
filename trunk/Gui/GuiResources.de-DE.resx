<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ButtonCancel" xml:space="preserve">
    <value>&amp;Abbrechen</value>
  </data>
  <data name="ButtonOk" xml:space="preserve">
    <value>&amp;OK</value>
  </data>
  <data name="EncryptPrivateKeyCertificateId" xml:space="preserve">
    <value>Zertifikatsid:</value>
  </data>
  <data name="EncryptPrivateKeyCertificateType" xml:space="preserve">
    <value>Zertifikatstyp:</value>
  </data>
  <data name="EncryptPrivateKeyChoose" xml:space="preserve">
    <value>Privaten Schlüssel verschlüsseln</value>
  </data>
  <data name="EncryptPrivateKeyEncrypted" xml:space="preserve">
    <value>Dein privater Schlüssel ist verschlüsselt. Gib deine Passphrase ein, um ihn zu entschlüsseln.</value>
  </data>
  <data name="EncryptPrivateKeyInfo" xml:space="preserve">
    <value>Du kannst deinen privaten Schlüssel verschlüsseln, um ihn gegen unbefugte Benutzung zu schützen. Wenn du das tust, musst du deine Passphrase jeweils eingeben, wenn der Schlüssel benutz wird.</value>
  </data>
  <data name="EncryptPrivateKeyPassphrase" xml:space="preserve">
    <value>Passphrase:</value>
  </data>
  <data name="EncryptPrivateKeyRepeat" xml:space="preserve">
    <value>Passphrase wiederholen:</value>
  </data>
  <data name="EncryptPrivateKeyTitle" xml:space="preserve">
    <value>Pi-Vote Schutz des privaten Schlüssels</value>
  </data>
  <data name="EncryptPrivateKeyUnlockAction" xml:space="preserve">
    <value>Vorgang:</value>
  </data>
  <data name="MessageBoxTitle" xml:space="preserve">
    <value>Pi-Vote</value>
  </data>
  <data name="ChangePassphraseMessageChange" xml:space="preserve">
    <value>Alte und neue Passphrase eingeben um diese zu ändern.</value>
  </data>
  <data name="ChangePassphraseMessageWrong" xml:space="preserve">
    <value>Alte Passphrase falsch.</value>
  </data>
  <data name="ChangePassphraseNewPassphrase" xml:space="preserve">
    <value>Neue Passphrase:</value>
  </data>
  <data name="ChangePassphraseOldPassphrase" xml:space="preserve">
    <value>Alte Passphrase:</value>
  </data>
  <data name="EncryptPrivateKeyWrongPassphrase" xml:space="preserve">
    <value>Passphrase falsch.</value>
  </data>
  <data name="ButtonAbort" xml:space="preserve">
    <value>&amp;Abbrechen</value>
  </data>
  <data name="ButtonIgnore" xml:space="preserve">
    <value>&amp;Ignorieren</value>
  </data>
  <data name="ButtonNo" xml:space="preserve">
    <value>&amp;Nein</value>
  </data>
  <data name="ButtonRetry" xml:space="preserve">
    <value>&amp;Wiederholen</value>
  </data>
  <data name="ButtonYes" xml:space="preserve">
    <value>&amp;Ja</value>
  </data>
  <data name="PiVoteClient" xml:space="preserve">
    <value>Pi-Vote Client</value>
  </data>
  <data name="UnlockActionAuthorityCheckShares" xml:space="preserve">
    <value>Schlüsselteile entschlüsseln und Antwort signieren.</value>
  </data>
  <data name="UnlockActionAuthorityCreateShares" xml:space="preserve">
    <value>Neu erstellte Schlüsselteile signieren</value>
  </data>
  <data name="UnlockActionAuthorityDecipher" xml:space="preserve">
    <value>Partielle Entschlüsselungen signieren.</value>
  </data>
  <data name="UnlockActionCreateVoting" xml:space="preserve">
    <value>Abstimmungsparameter signieren</value>
  </data>
  <data name="UnlockActionSignRequest" xml:space="preserve">
    <value>Deine Zertifikatsanfrage signieren.</value>
  </data>
  <data name="UnlockActionVote" xml:space="preserve">
    <value>Stimme signieren</value>
  </data>
  <data name="AskForPartiallyDecipher" xml:space="preserve">
    <value>Es sind {0} gültige Stimmen vorhanden. Wenn diese Zahl zu klein erscheint, könnte ein Sicherheitsproblem bestehen. Wenn das der Fall ist, musst du das Resultat nicht Entschlüsseln, sondern die anderen Autoritäten und Administratoren verständigen. Mit Entschlüsseln weiterfahren?</value>
  </data>
  <data name="ButtonDone" xml:space="preserve">
    <value>&amp;Fertig</value>
  </data>
  <data name="ButtonNext" xml:space="preserve">
    <value>&amp;Weiter</value>
  </data>
  <data name="ButtonPrevious" xml:space="preserve">
    <value>&amp;Zurück</value>
  </data>
  <data name="ContextMenuAdd" xml:space="preserve">
    <value>&amp;Hinzufügen...</value>
  </data>
  <data name="ContextMenuEdit" xml:space="preserve">
    <value>&amp;Bearbeiten...</value>
  </data>
  <data name="ContextMenuRemove" xml:space="preserve">
    <value>&amp;Entfernen</value>
  </data>
  <data name="ButtonClose" xml:space="preserve">
    <value>&amp;Schliessen</value>
  </data>
  <data name="UnlockActionDelete" xml:space="preserve">
    <value>Kommando zum Löschen der Abstimmung signieren</value>
  </data>
  <data name="CertificateFormCloseButton" xml:space="preserve">
    <value>S&amp;chliessen</value>
  </data>
  <data name="CertificateFormTitle" xml:space="preserve">
    <value>Zertifikatsansicht</value>
  </data>
  <data name="CertificateId" xml:space="preserve">
    <value>Id:</value>
  </data>
  <data name="CertificateInvalid" xml:space="preserve">
    <value>Ungültig</value>
  </data>
  <data name="CertificateName" xml:space="preserve">
    <value>Name:</value>
  </data>
  <data name="CertificateSignatureId" xml:space="preserve">
    <value>Id</value>
  </data>
  <data name="CertificateSignatureInvalid" xml:space="preserve">
    <value>Ungültig</value>
  </data>
  <data name="CertificateSignatureName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="CertificateSignatures" xml:space="preserve">
    <value>Signaturen:</value>
  </data>
  <data name="CertificateSignatureStatus" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="CertificateSignatureUnknown" xml:space="preserve">
    <value>Unbekannt</value>
  </data>
  <data name="CertificateSignatureValid" xml:space="preserve">
    <value>Gültig</value>
  </data>
  <data name="CertificateSignatureValidFrom" xml:space="preserve">
    <value>Gültig von</value>
  </data>
  <data name="CertificateSignatureValidUntil" xml:space="preserve">
    <value>Gültig bis</value>
  </data>
  <data name="CertificateType" xml:space="preserve">
    <value>Typ:</value>
  </data>
  <data name="CertificateValid" xml:space="preserve">
    <value>Gültig</value>
  </data>
  <data name="CertificateCreationDate" xml:space="preserve">
    <value>Erstellungdatum:</value>
  </data>
  <data name="CertificateDetail" xml:space="preserve">
    <value>&amp;Details...</value>
  </data>
  <data name="GenerateSignCheckDialogInfo" xml:space="preserve">
    <value>Scanne den QR code unten mit deinem Smartphone um das Authentifzierungscookie zu setzen. Du kannst auch den Link clicken um das  Authentifzierungscookie auf deinem Computer zu setzen.
Jedes mal, wenn du ein neues Authentifzierungscookie generierst, wird das alte deaktiviert.</value>
  </data>
  <data name="GenerateSignCheckDialogTitle" xml:space="preserve">
    <value>Unterschriftsprüfung generieren</value>
  </data>
  <data name="SigningRequestDocumentDontSend" xml:space="preserve">
    <value>Bitte dieses Formular nicht an die Zertifizierungsstelle schicken.</value>
  </data>
  <data name="SigningRequestDocumentInfo" xml:space="preserve">
    <value>Wenn du die drei Unterschriften von Notaren oder Autoritäten gesammelt und selbst unterschrieben hast, muss das Formular an die Zertifizierungstelle gesendet werden.</value>
  </data>
  <data name="SigningRequestDocumentLeave" xml:space="preserve">
    <value>Die Information unterhalb dieser Zeile ist für die Verarbietung durch die Zertifizierungsstelle. Bitte leer lassen.</value>
  </data>
  <data name="SigningRequestDocumentPpsAddress1" xml:space="preserve">
    <value>Piratenpartei Schweiz</value>
  </data>
  <data name="SigningRequestDocumentPpsAddress2" xml:space="preserve">
    <value>CH-1337 Vallorbe</value>
  </data>
  <data name="SigningRequestDocumentSendTo" xml:space="preserve">
    <value>Senden an:</value>
  </data>
  <data name="UnlockActionGenerateSignCheck" xml:space="preserve">
    <value>Unterschriftenprüfung generieren</value>
  </data>
  <data name="GenerateSignCheckDialogSecret" xml:space="preserve">
    <value>Du musst diesen QR code und den Link geheim halten.</value>
  </data>
</root>